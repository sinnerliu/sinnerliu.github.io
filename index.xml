<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>终点站</title>
    <link>https://blog.gofinall.com/</link>
    <description>Recent content on 终点站</description>
    <generator>Hugo -- gohugo.io</generator>
    
    <language>zh-CN</language>
    
    
    
    
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://blog.gofinall.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://blog.gofinall.com/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.gofinall.com/about/</guid>
      <description>&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p&gt;本站作为博客(typecho)的备用站，等哪天我的博客主机(阿里云)没钱续费了，就直接在这个静态博客上更新了；&lt;/p&gt;

&lt;p&gt;博客主站：&lt;a href=&#34;https://gofinall.com&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://gofinall.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQL常用json方法使用记录</title>
      <link>https://blog.gofinall.com/post/mysql-json/</link>
      <pubDate>Wed, 14 Aug 2019 17:15:21 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/mysql-json/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;Mysql5.7版本以后提供了一个原生的Json类型，Json值将不再以字符串的形式存储，而是采用一种允许快速读取文本元素（document elements）的内部二进制（internal binary）格式。在Json列插入或者更新的时候将会自动验证Json文本，未通过验证的文本将产生一个错误信息。Json文本采用标准的创建方式，可以使用大多数的比较操作符进行比较操作，例如：=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=, &amp;lt;&amp;gt;, != 和 &amp;lt;=&amp;gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;常用使用方法&#34;&gt;常用使用方法&lt;/h3&gt;

&lt;h4 id=&#34;创建有json字段的表&#34;&gt;创建有json字段的表&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-- 创建表
CREATE TABLE table_json(id INT PRIMARY KEY, sname VARCHAR(20) , info  JSON);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查询记录&#34;&gt;查询记录&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-- 查询记录
SELECT sname,JSON_EXTRACT(info,&#39;$.age&#39;) FROM table_json;
SELECT sname,info-&amp;gt;&#39;$.age&#39; FROM table_json;
-- 查询key
SELECT id,json_keys(info) FROM table_json;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;修改记录&#34;&gt;修改记录&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-- 增加键
UPDATE table_json SET info = json_set(info,&#39;$.ip&#39;,&#39;192.168.1.1&#39;) WHERE id = 2;

-- 变更值
UPDATE table_json SET info = json_set(info,&#39;$.ip&#39;,&#39;192.168.1.2&#39;) WHERE id = 2;

-- 删除键
UPDATE table_json SET info = json_remove(info,&#39;$.ip&#39;) WHERE id = 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;插入&#34;&gt;插入&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;UPDATE table_json SET info = JSON_INSERT(info,&#39;$.user-agent&#39;,&#39;chrome&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/json-creation-functions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/ooo0/p/9309277.html&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://www.cnblogs.com/ooo0/p/9309277.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>又一次长春出差后的感想</title>
      <link>https://blog.gofinall.com/post/changchun-1/</link>
      <pubDate>Tue, 13 Aug 2019 16:42:11 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/changchun-1/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;又一次长春出差，直达的飞机差不多5小时，本就疲惫不堪，但是下飞机后打出租车更让人心累；&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;经历&#34;&gt;经历&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2014年的时候，去过一次长春，从机场打出租车到市区，出租车司机不按照打表的价格收费，要价150，实际打表的价格在110多点，由于出差，需要发票报销，出租车司机说给定额票，在人家地盘上，我也不敢说啥；&lt;/li&gt;
&lt;li&gt;2015年的时候，又去了一次长春，打出租车照旧喊价，但是不是给的定额票，司机直接从车里拿出另一个‘计价器’，问要好多的票，他们直接用这个‘计价器’打出来；&lt;/li&gt;
&lt;li&gt;2016年的时候，又又去了一次长春，打车还是老规矩，更要命的是去机场的时候，把我和另一个同事直接丢路上，让我们去坐另外的出租车，上车一看，车上已经有两个去机场，然后我们四个大老爷们挤着去了机场，但这次是按照打表给的票；&lt;/li&gt;
&lt;li&gt;前段时间，又又又去了一次长春，上出租车，师傅说打表，心想着这次出租车良心了，但是到了目的地后，打表的价格是160多，记得上次打表才110左右，我也不敢问，给钱拿票走人；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;感想&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;出租车是一个城市的门面，尤其是跑机场、火车站，外地人来了接触的第一个本地事物，不应该有喊价、调表(猜测)、强制拼车等行为，给人留下的印象不好；又加上大部分东北爷们脾气暴躁(网传)，又不敢给他们理论，也就只有默默的接受了。&lt;/p&gt;

&lt;h3 id=&#34;建议&#34;&gt;建议&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;网约车：去机场和到市区，可以打网约车，价格是平台订的，相对透明，不坑；&lt;/li&gt;
&lt;li&gt;城际火车：不赶时间的，或者去市中心附近的，可以坐城际火车，价格便宜(10块左右)，时间快(10多分钟)，城际火车大概是1个小时一趟，可以直接在机场下面坐，或者从市中心的火车站坐到机场。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上是个人实际经历，勿怼。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>斐讯N1折腾记1-刷入armbian</title>
      <link>https://blog.gofinall.com/post/feixun-n1-1/</link>
      <pubDate>Tue, 23 Jul 2019 10:26:06 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/feixun-n1-1/</guid>
      <description>&lt;h3 id=&#34;n1介绍&#34;&gt;N1介绍&lt;/h3&gt;

&lt;p&gt;斐讯N1原来的定位: NAS和区块链设备，后来斐讯翻车和被很多大神破解，刷入不同的固件，从而让它能实现各种功能，再加上目前低廉的价格，让它的可玩性和性价比都极高。&lt;/p&gt;

&lt;p&gt;如果你不是拿来做开发、需要GPIO开发等一个N1显然更实用，适合普通人的生活需求，树莓派对于开发者比较友好一些。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;硬件配置&#34;&gt;硬件配置&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;N1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CPU&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Amlogic S905D, 4-Core Cortex-A53, 1.8Ghz&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;GPU&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mail-450&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RAM&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2G&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Storage&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8G EMMC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Network&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;BT4, 802.11 n/ac&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Interface&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;HDMI * 1, USB * 2, 1000M Ethernet * 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;用途&#34;&gt;用途&lt;/h3&gt;

&lt;p&gt;N1的核心功能就是看网络电视，主系统是Android 7，下载电视版APP可以看很多节目、电影等，如果通过刷机可以获得更多功能。刷Linux系统可以获得一台小型服务器，配合内网穿透和DDNS可以当一个低功耗小型服务器。可以作为下载服务器，有专门的下载优化固件，专注下载。N1的接口有: 网线接口、HDMI接口和两个USB2.0接口，需要大量文件传输的话速度比较一般。&lt;/p&gt;

&lt;p&gt;上周从PDD上买入N1，84元，价格还算可以。&lt;/p&gt;

&lt;h3 id=&#34;折腾准备&#34;&gt;折腾准备&lt;/h3&gt;

&lt;h4 id=&#34;环境准备&#34;&gt;环境准备&lt;/h4&gt;

&lt;p&gt;下载好adb相关的工具&lt;/p&gt;

&lt;p&gt;相关工具下载可用&lt;a href=&#34;https://cnone.lty.fun/home/工具库/N1&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://cnone.lty.fun/home/%E5%B7%A5%E5%85%B7%E5%BA%93/N1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感谢&lt;a href=&#34;https://luotianyi.vc/&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Luminous&lt;/a&gt;提供和分享相关工具。&lt;/p&gt;

&lt;h4 id=&#34;降级&#34;&gt;降级&lt;/h4&gt;

&lt;p&gt;当n1的系统版本在 V2.19 以上的都必须先降级才能刷机，由于我为了少折腾，直接买的是刷好了yyf的精简固件的，降级教程网上很多，此文章就忽略了。&lt;/p&gt;

&lt;h4 id=&#34;刷入armbian&#34;&gt;刷入armbian&lt;/h4&gt;

&lt;h5 id=&#34;系统选择&#34;&gt;系统选择&lt;/h5&gt;

&lt;p&gt;网上大神制作的N1系统有：debian、ubuntu、centos，参考网上反馈使用的稳定性，最终选择了ubuntu，&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img.xz&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#34;制作u盘系统&#34;&gt;制作U盘系统&lt;/h5&gt;

&lt;p&gt;本人使用的是闪迪的cz33，听说兼容性好点；&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;usbit&lt;/code&gt;或者&lt;code&gt;win32diskimager&lt;/code&gt;烧录固件到U盘，本文使用&lt;code&gt;usbit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.gofinall.com/post/images/n1-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意此操作会格式化U盘&lt;/strong&gt;，将一个8G以上的U盘插入电脑，在左侧选择U盘，然后再点击Restore，然后选择刚才解压出来的.img镜像，一路yes就会开始写入U盘，等着写入结束即可，当写入结束后，&lt;strong&gt;windows系统会弹出一个格式化的提示，此时不要点格式化，否则写入的系统会被清掉&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&#34;修改引导dtb&#34;&gt;修改引导dtb&lt;/h5&gt;

&lt;p&gt;如果不修改dtb，可能会导致系统负载长期在2.0以上。&lt;/p&gt;

&lt;p&gt;刻录完的U盘会有一个可读取分区和一个不可读取分区，进入可读取的那个分区，把&lt;code&gt;meson-gxl-s905d-phicomm-n1-xiangsm.dtb&lt;/code&gt;放到U盘的可读分区的dtb目录下，用&lt;code&gt;Notepad++&lt;/code&gt;编辑uEnv.ini，&lt;strong&gt;切记不可用windows自带的记事本&lt;/strong&gt;，把文件里的dtb_name后面的文件名换成&lt;code&gt;meson-gxl-s905d-phicomm-n1-xiangsm.dtb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#dtb_name=/dtb/meson-gxm-khadas-vim2.dtb
dtb_name=/dtb/meson-gxl-s905d-phicomm-n1-xiangsm.dtb
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;修改系统可从u盘启动&#34;&gt;修改系统可从U盘启动&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把盒子插上显示器，查看盒子的ip地址，如：&lt;code&gt;192.168.1.100&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;进入包含&lt;code&gt;adb.exe&lt;/code&gt;目录，按住&lt;code&gt;shift&lt;/code&gt;然后再点击右键，选择&lt;code&gt;在此处打开PowerShell窗口&lt;/code&gt;，在打开的PowerShell窗口先后运行这两条指令&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.\adb.exe connect 192.168.1.100
.\adb.exe shell reboot update
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;执行完成后，看到显示器上盒子已经在重启阶段，迅速把U盘插到靠近hdmi口的usb口(听说这个口兼容性好点，具体未实验)，等待系统重启进入linux系统，&lt;strong&gt;此步骤中，切记不能开着盒子插入U盘，在安卓系统下插入U盘会导致U盘上的文件属组改变，可以等上面的adb命令执行完成后，关闭盒子，再插入U盘，再启动盒子&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;初始化系统&#34;&gt;初始化系统&lt;/h5&gt;

&lt;p&gt;如果有键盘，插入另一个usb口，输入登录账号&lt;code&gt;root&lt;/code&gt;，root密码为&lt;code&gt;1234&lt;/code&gt;，登录后提示创建用户，直接&lt;code&gt;ctrl+c&lt;/code&gt;取消即可。&lt;/p&gt;

&lt;p&gt;如果没有键盘，可以用&lt;code&gt;ScanPort.exe&lt;/code&gt;来扫描网段内22端口的ip，或者直接去路由器上查看盒子的ip地址&lt;/p&gt;

&lt;p&gt;如果不需要把系统写入盒子的emmc中，整个过程就结束了&lt;/p&gt;

&lt;p&gt;用putty登录linux，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.gofinall.com/post/images/n1-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装应用&#34;&gt;安装应用&lt;/h3&gt;

&lt;p&gt;可以安装的应用挺多的，现在很多软件都有arm的，如：frp、n2n、php、nginx、docker等，等有空了把我阿里云上的typecho博客迁移到N1上来。&lt;/p&gt;

&lt;p&gt;人生在于折腾。&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&#34;https://luotianyi.vc/1306.html&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://luotianyi.vc/1306.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Nginx反代Websocket 403报错</title>
      <link>https://blog.gofinall.com/post/nginx-websocket/</link>
      <pubDate>Fri, 12 Jul 2019 18:24:50 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/nginx-websocket/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;由于服务器对外只有一个端口，需要用nginx把服务器上多个tomcat的地址代理出来，工程中需要用Websocket，按照网上常规配置后，部分Websocket访问报403错误，部分Websocket正常。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;nginx版本&#34;&gt;nginx版本&lt;/h3&gt;

&lt;p&gt;1.14.2&lt;/p&gt;

&lt;h3 id=&#34;配置&#34;&gt;配置&lt;/h3&gt;

&lt;p&gt;最开始的配置如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &amp;quot;upgrade&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置后，部分Websocket访问报403错误，部分Websocket正常。经过google后，参考&lt;a href=&#34;https://github.com/drone/drone/issues/767&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;websocket problem when deployed behind nginx&lt;/a&gt;，后新增如下配置，重启nginx就好了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;proxy_set_header Origin &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整的配置如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; location /api/stream {
        proxy_pass http://127.0.0.1:8000;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &amp;quot;upgrade&amp;quot;;

        proxy_set_header Origin &#39;&#39;;
    }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>利用Proxychains在终端使用socks5/http代理</title>
      <link>https://blog.gofinall.com/post/proxychains-ng/</link>
      <pubDate>Thu, 06 Jun 2019 14:33:31 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/proxychains-ng/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在国内的服务器上从github上拉代码或者go get的时候非常慢(网络受阻)的时候。&lt;/li&gt;
&lt;li&gt;当内网的某些服务器不能上外网，但是内网中有一台电脑能上外网，想让不能上外网的服务器上外网的时候。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;proxychains可以非常简单快速的设置好代理，让其它不能上网的服务器通过能上网的服务器进行上网。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;下载地址&#34;&gt;下载地址&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/rofl0r/proxychains-ng&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装方法&#34;&gt;安装方法&lt;/h3&gt;

&lt;p&gt;1  拉取代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:rofl0r/proxychains-ng.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2  编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost proxychains-ng]# cd proxychains-ng
[root@localhost proxychains-ng]# ./configure
[root@localhost proxychains-ng]# make
[root@localhost proxychains-ng]# make install
[root@localhost proxychains-ng]# cp src/proxychains.conf /usr/local/etc/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3  修改配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost proxychains-ng]# vi /usr/local/etc/proxychains.conf
#修改最后ProxyList里面的参数，假如我的代理地址为socks5:192.168.137.130 1080
#将socks4 127.0.0.1 9095改为
socks5         192.168.137.130 1080
#如果是http代理，则把socks5改成http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4  使用方法&lt;/p&gt;

&lt;p&gt;在需要进行代理的命令前加&lt;code&gt;proxychains&lt;/code&gt;即可，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#直接访问网络不通的网址
[root@localhost]# curl http://ifconfig.me
curl: (6) Couldn&#39;t resolve host &#39;ifconfig.me&#39;
#使用代理的方式访问
[root@localhost]# proxychains curl http://ifconfig.me
[proxychains] config file found: /usr/local/etc/proxychains.conf
[proxychains] preloading /usr/local/lib/libproxychains4.so
[proxychains] DLL init
[proxychains] Strict chain ... 192.168.137.130:1080 ... ifconfig.me:80 ... OK
119.44.127.54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用curl、yum、git clone、go get等命令的时候，都只要在前面加上proxychains，就都可以通过192.168.137.130的网络进行访问。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows使用NSSM将任意exe封装为服务</title>
      <link>https://blog.gofinall.com/post/windows-service-nssm/</link>
      <pubDate>Thu, 23 May 2019 14:32:58 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/windows-service-nssm/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;NSSM是一个服务封装程序，它可以将普通exe程序封装成服务，使之像windows服务一样运行。同类型的工具还有微软自己的srvany，不过nssm更加简单易用，并且功能强大。它的特点如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;支持普通exe程序（控制台程序或者带界面的Windows程序都可以）&lt;/li&gt;
&lt;li&gt;安装简单，修改方便&lt;/li&gt;
&lt;li&gt;可以重定向输出（并且支持Rotation）&lt;/li&gt;
&lt;li&gt;可以自动守护封装了的服务，程序挂掉了后可以自动重启&lt;/li&gt;
&lt;li&gt;可以自定义环境变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;官网&#34;&gt;官网&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nssm.cc/&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;http://nssm.cc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;下载最新版本&lt;a href=&#34;http://nssm.cc/ci/nssm-2.24-103-gdee49fc.zip&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;nssm&lt;/a&gt;，也可以下载最新release版本；&lt;/li&gt;
&lt;li&gt;根据自己的平台，将32/64位nssm.exe文件解压至任意文件夹。&lt;/li&gt;
&lt;li&gt;cmd定位至nssm.exe所在目录。&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;nssm install {服务名称}&lt;/code&gt;，即注册服务的名称。注册服务弹出如下NSSM界面。
&lt;img src=&#34;https://blog.gofinall.com/post/images/nssm.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Application标签设置：&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Application Path: 选择系统安装的exe。&lt;/li&gt;
&lt;li&gt;Startup directory: 选择exe项目的根目录。&lt;/li&gt;
&lt;li&gt;Arguments: 输入启动参数&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上述步骤操作完成，即可点击Install service来注册服务。我们在系统的服务中即可找到刚刚注册的服务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在系统服务中找到刚刚注册的服务，右键&lt;code&gt;属性 - 恢复&lt;/code&gt;即可设置此服务挂掉重启等内容。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其它界面的是高级参数的配置，可以根据需要自行选择。&lt;/p&gt;

&lt;p&gt;参数填完后执行&amp;rdquo;install service&amp;rdquo;按钮即可将服务安装到系统，可以使用系统的服务管理工具查看了。&lt;/p&gt;

&lt;p&gt;当然，如果要自动化安装，可以直接带上程序路径：&lt;code&gt;nssm install &amp;lt;servicename&amp;gt; &amp;lt;program&amp;gt; [&amp;lt;arguments&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NSSM本身win7及以上的系统基本都是支持的，我测试过win7，2008,2016系统，都是没有问题的，如果安装失败，请首先检查是否装了某国产管家或国产杀毒软件。&lt;/p&gt;

&lt;p&gt;安装完成后，服务还没有启动，需要通过下面的服务管理的命令启动服务。&lt;/p&gt;

&lt;h4 id=&#34;服务管理&#34;&gt;服务管理&lt;/h4&gt;

&lt;p&gt;服务管理主要有启动、停止和重启，其命令如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动服务：&lt;code&gt;nssm start &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止服务： &lt;code&gt;nssm stop &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启服务:    &lt;code&gt;nssm restart &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，也可以使用系统自带的服务管理器操作和使用系统的命令。&lt;/p&gt;

&lt;h4 id=&#34;修改参数&#34;&gt;修改参数&lt;/h4&gt;

&lt;p&gt;NSSM安装的服务修改起来非常方便，命令如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nssm edit &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会自动启动操作界面，直接更改即可。&lt;/p&gt;

&lt;h4 id=&#34;服务删除&#34;&gt;服务删除&lt;/h4&gt;

&lt;p&gt;服务删除可以使用如下命令之一：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nssm remove &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nssm remove &amp;lt;servicename&amp;gt; confirm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;功能没有大的区别，后面的命令是自动确认的，没有交互界面。&lt;/p&gt;

&lt;h4 id=&#34;命令行&#34;&gt;命令行&lt;/h4&gt;

&lt;p&gt;服务自动化需要使用更多的命令行，具体参看官方文档： &lt;a href=&#34;https://nssm.cc/commands&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://nssm.cc/commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如下是一个官方安装Jenkins服务的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nssm install Jenkins %PROGRAMFILES%\Java\jre7\bin\java.exe
nssm set Jenkins AppParameters -jar slave.jar -jnlpUrl https://jenkins/computer/%COMPUTERNAME%/slave-agent.jnlp -secret redacted
nssm set Jenkins AppDirectory C:\Jenkins
nssm set Jenkins AppStdout C:\Jenkins\jenkins.log
nssm set Jenkins AppStderr C:\Jenkins\jenkins.log
nssm set Jenkins AppStopMethodSkip 6
nssm set Jenkins AppStopMethodConsole 1000
nssm set Jenkins AppThrottle 5000
nssm start Jenkins
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>chrome 73 版本上安装crx插件出现「程序包无效 CRX_HEADER_INVALID」的报错解决办法</title>
      <link>https://blog.gofinall.com/post/chrome-install-crx/</link>
      <pubDate>Sat, 18 May 2019 11:00:04 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/chrome-install-crx/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;在最新版 chrome 73 版本上，通过打开开发者模式，通过拖入crx文件来安装扩展，会出现「程序包无效 CRX_HEADER_INVALID」的报错，不想把crx解压了直接加载安装。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;chrome 更了的 crx3 的签名&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=941356&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=941356&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;解决办法&#34;&gt;解决办法&lt;/h3&gt;

&lt;p&gt;可以通过&amp;rsquo;get crx&amp;rsquo;插件来下载谷歌商店插件保存成crx文件：&lt;a href=&#34;https://chrome.google.com/webstore/detail/get-crx/dijpllakibenlejkbajahncialkbdkjc&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Get CRX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重新从谷歌网上应用商店下载新版本的crx即可&lt;/strong&gt;，拖入&lt;code&gt;get crx&lt;/code&gt;下载的插件即可安装。&lt;/p&gt;

&lt;p&gt;顺便在分享几个常用插件，方便不能上谷歌商店的人下载，下载后直接拖入即可安装。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/SwitchyOmega-v2.5.20.crx&#34;&gt;SwitchyOmega-v2.5.20.crx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/uBlock Origin-v1.19.2.crx&#34;&gt;uBlock Origin-v1.19.2.crx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/Tampermonkey-v4.8.41.crx&#34;&gt;Tampermonkey-v4.8.41.crx&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内网穿透之n2n-点对网</title>
      <link>https://blog.gofinall.com/post/n2n-p2p-route/</link>
      <pubDate>Fri, 17 May 2019 15:19:54 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/n2n-p2p-route/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;n2n v+p+n 其实与 pptp v+p+n 有类似的一面，都是一种点对点的局域网，所不同的是，n2n 可以建立点与点之间的直连，而 pptp 局域网内通讯的全部流量都必须走中心节点。pptp可以实现点对忘的连接，n2n应该也可以实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;p&gt;一台edge服务器充当&amp;rsquo;网关&amp;rsquo;角色，另外的edge服务器配置路由表，让内网的ip走指定的网关，就能达到在edge端的电脑上实现直接访问内网的ip。&lt;/p&gt;

&lt;h3 id=&#34;服务端edge服务器信息&#34;&gt;服务端edge服务器信息&lt;/h3&gt;

&lt;p&gt;centos 7 X86_64&lt;/p&gt;

&lt;h3 id=&#34;n2n版本&#34;&gt;n2n版本&lt;/h3&gt;

&lt;p&gt;v2s&lt;/p&gt;

&lt;h3 id=&#34;服务端edge配置&#34;&gt;服务端edge配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在n2n客户端(edge)上面(linux)开启转发功能&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/sysctl.conf
#net.ipv4.ip_forward = 1 #将前面的#删除后保存退出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行&lt;code&gt;sysctl -p&lt;/code&gt;让刚刚修改的信息生效&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;调整centos7的防火墙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于对centos7默认的防火墙firewalld不熟悉，我们关闭firewalld，安装iptables防火墙&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#停止firewalld服务
systemctl stop firewalld

#禁止firewalld服务自启动
systemctl disable firewalld

#安装iptables防火墙
yum -y install iptables-services
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;对iptables进行初始化工作&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#清空filter表
iptables -F

#清空nat表
iptables -t nat -F

#默认允许所有传出连接
iptables -P OUTPUT ACCEPT

#允许环回接口的传入连接
iptables -A INPUT -i lo -j ACCEPT

#允许已建立的传入连接
iptables -t nat -A POSTROUTING -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;保存iptables配置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;iptables-save &amp;gt; /etc/sysconfig/iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动iptables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl start iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;开机自动启动iptables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl enable iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;客户端edge配置&#34;&gt;客户端edge配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正常启动edge，确认能访问内网edge的ip&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置路由表&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;windows&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  route add -p 192.168.1.0(需要连接的内网网段) MASK 255.255.255.0 192.168.5.6(n2n的edge服务端ip)
  -p: 为当前Windows系统路由列表中永久添加一条静态路由,重启系统依然有效，如果不需要静态路由，添加路由时去掉-p参数。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  route add -net 192.168.1.0(需要连接的内网网段) netmask 255.255.255.0 gw 192.168.5.6(n2n的edge服务端ip)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;验证，在配置路由表的电脑上ping内网的ip&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>内网穿透之n2n-介绍及使用说明</title>
      <link>https://blog.gofinall.com/post/n2n-p2p-introduce/</link>
      <pubDate>Fri, 17 May 2019 12:01:09 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/n2n-p2p-introduce/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ntop.org/products/n2n/&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;N2N &lt;/a&gt;是一款开源的P2P v+p+n 软件，其作者是著名的开源网管软件ntop的作者Luca Deri。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;N2N 是一个双层架构的v+p+n ，它让用户可以在网络层上开发P2P应用的典型功能，而不是在应用层上开发。这意味着用户可以获取本地IP一样的可见度（比如说，同一个n2n网络内的两台PC机可以相互ping通），并且可以通过n2n虚拟网内的IP地址相互访问，而不必关心当前所属的物理网络地址。可以这样说，OpenV+P+N是把SSL从应用层转移到网络层实现（比如说实现https协议），而n2n则是把P2P的实现从应用层转移到网络层。&lt;/p&gt;

&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;

&lt;p&gt;Edge 节点：用户PC 机上安装的用于建立n2n网络的软件。几乎每个edge节点都会建立一个tun/tap设备，作为接入n2n网络的入口。&lt;/p&gt;

&lt;p&gt;Supernode 超级节点：它在edge 节点间建立握手，或为位于防火墙之后的节点中转数据。它的基础作用是注册节点的网络路径，并为不能直通的节点做路由，能够直通的节点间通信，是P2P的。&lt;/p&gt;

&lt;p&gt;Edge 节点间通过虚拟的tap 网卡交互。每个tap网卡都是一个n2n edge节点。每台PC机可以有多个tap网卡，所以，在n2n网络中，同一台PC机可以属于多个网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.gofinall.com/post/images/n2n1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中super node 提供场所，让两个位于NAT/防火墙之后的edge node进行会面，一旦双方完成首次握手，剩下的数据流就之发生在两个edge node之间，如果有一方的NAT属于对称型(symmetrical)，super node则还需继续为双方提供数据包的转发;edge node负责数据流的加解密，原理很简单。&lt;/p&gt;

&lt;h3 id=&#34;与传统的v-p-n的优点&#34;&gt;与传统的v+p+n的优点&lt;/h3&gt;

&lt;p&gt;大部分v+p+n，都是通过服务器中转，而n2n是通过udp协议，在两边edge的NAT情况比较好的情况下，会建立两个edge之间的&lt;strong&gt;直接连接&lt;/strong&gt;，一个北京和一个重庆的两个edge服务器，如果直连成功，之间的下载速度可以达到 n MB/s；当网络条件比较恶劣的时候，数据会从supernode中转，速度就靠到supernode的速度决定；&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;h4 id=&#34;地址&#34;&gt;地址&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;v1: &lt;a href=&#34;https://github.com/meyerd/n2n/tree/master/n2n_v1&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/tree/master/n2n_v1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;v2: &lt;a href=&#34;https://github.com/ntop/n2n&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/ntop/n2n&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;v2.1(v2s): &lt;a href=&#34;https://github.com/meyerd/n2n/tree/master/n2n_v2&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/tree/master/n2n_v2&lt;/a&gt; &lt;strong&gt;非官方版本，与官方的 v2 不兼容&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安卓版本: &lt;a href=&#34;https://github.com/switch-iot/hin2n&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/switch-iot/hin2n&lt;/a&gt; (最新版本支持v1、v2、v2s)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过网友的测试，n2n_v2s直连概率比较高，所以本文暂时只介绍n2n_v2s的安装及使用方法&lt;/p&gt;

&lt;h4 id=&#34;安装方法&#34;&gt;安装方法&lt;/h4&gt;

&lt;p&gt;详见 &lt;a href=&#34;https://github.com/meyerd/n2n/wiki&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/wiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;

&lt;h4 id=&#34;supernode&#34;&gt;supernode&lt;/h4&gt;

&lt;p&gt;在有公网的的服务器上安装supernode，为了区分其他版本，重命名为supernode_v2s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost ~]# supernode_v2s --help
supernode_v2s usage
-l &amp;lt;lport&amp;gt;      Set UDP main listen port to &amp;lt;lport&amp;gt;
-f              Run in foreground.
-u &amp;lt;UID&amp;gt;        User ID (numeric) to use when privileges are dropped.
-g &amp;lt;GID&amp;gt;        Group ID (numeric) to use when privileges are dropped.
-v              Increase verbosity. Can be used multiple times.
-h              This help message.

# 启动supernode
[root@localhost ~]# supernode_v2s -l 10088

[root@localhost ~]# ps -ef|grep supernode_v2s
root     21024     1  0 Apr25 ?        00:03:59 supernode_v2s -l 10088
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;edge&#34;&gt;edge&lt;/h4&gt;

&lt;p&gt;在内网电脑上安装edge，为了区分其他版本，重命名为edge_v2s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost1 ~]# edge_v2s --help
Welcome to n2n v.2.1.0 for Linux-2.6.32-642.el6.x86_64
Built on Jun 12 2018 18:21:36
Copyright 2007-09 - http://www.ntop.org

edge -d &amp;lt;tun device&amp;gt; -a [static:|dhcp:]&amp;lt;tun IP address&amp;gt; -c &amp;lt;community&amp;gt; [-k &amp;lt;encrypt key&amp;gt; | -K &amp;lt;key file&amp;gt;] [-s &amp;lt;netmask&amp;gt;] [-u &amp;lt;uid&amp;gt; -g &amp;lt;gid&amp;gt;][-f][-m &amp;lt;MAC address&amp;gt;]
-l &amp;lt;supernode host:port&amp;gt; [-p &amp;lt;local port&amp;gt;] [-M &amp;lt;mtu&amp;gt;] [-r] [-E] [-v] [-t &amp;lt;mgmt port&amp;gt;] [-b] [-h]

-d &amp;lt;tun device&amp;gt;          | tun device name
-a &amp;lt;mode:address&amp;gt;        | Set interface address. For DHCP use &#39;-r -a dhcp:0.0.0.0&#39;
-c &amp;lt;community&amp;gt;           | n2n community name the edge belongs to.
-k &amp;lt;encrypt key&amp;gt;         | Encryption key (ASCII) - also N2N_KEY=&amp;lt;encrypt key&amp;gt;. Not with -K.
-K &amp;lt;key file&amp;gt;            | Specify a key schedule file to load. Not with -k.
-s &amp;lt;netmask&amp;gt;             | Edge interface netmask in dotted decimal notation (255.255.255.0).
-l &amp;lt;supernode host:port&amp;gt; | Supernode IP:port
-L &amp;lt;local_ip&amp;gt;            | Add local ip to bypass between same nat problem
-i &amp;lt;interval&amp;gt;            | Set the NAT hole-punch interval (default 20seconds)
-b                       | Periodically resolve supernode IP
                         : (when supernodes are running on dynamic IPs)
-p &amp;lt;local port&amp;gt;          | Fixed local UDP port.
-u &amp;lt;UID&amp;gt;                 | User ID (numeric) to use when privileges are dropped.
-g &amp;lt;GID&amp;gt;                 | Group ID (numeric) to use when privileges are dropped.
-f                       | Do not fork and run as a daemon; rather run in foreground.
-m &amp;lt;MAC address&amp;gt;         | Fix MAC address for the TAP interface (otherwise it may be random)
                         : eg. -m 01:02:03:04:05:06
-M &amp;lt;mtu&amp;gt;                 | Specify n2n MTU of edge interface (default 1400).
-r                       | Enable packet forwarding through n2n community.
-E                       | Accept multicast MAC addresses (default=drop).
-v                       | Make more verbose. Repeat as required.
-t                       | Management UDP Port (for multiple edges on a machine).

Environment variables:
  N2N_KEY                | Encryption key (ASCII). Not with -K or -k.
  
# 启动edge
[root@localhost1 ~]# edge_v2s -d n2nedge_v2s -a 172.10.2.200 -c community -u 604 -g 604 -k passwod -l 222.222.222.222:10088 -m 31:29:35:FB:C7:5B -r -L 192.168.1.100

# 查看edge的ip
[root@localhost1 ~]# ifconfig |grep 172.10.2.200
n2nedge_v2s   Link encap:Ethernet  HWaddr 31:29:35:FB:C7:5B  
              inet addr:172.10.2.200  Bcast:172.10.2.255  Mask:255.255.255.0
              inet6 addr: fe80::fe0c:8eef:f86e:d10/64 Scope:Link
              TX packets:1096871 errors:0 dropped:0 overruns:0 carrier:0
              TX packets:470900375 errors:0 dropped:0 overruns:3105 carrier:0
              RX bytes:11377271 (10.8 MiB)  TX bytes:41626135028 (38.7 GiB)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用参数说明：&lt;/p&gt;

&lt;p&gt;-d：虚拟网卡名称&lt;/p&gt;

&lt;p&gt;-a：n2n网卡的ip地址，即本机的n2n的ip&lt;/p&gt;

&lt;p&gt;-c：n2n组，只有相同组的edge之间才能进行通讯&lt;/p&gt;

&lt;p&gt;-u：如果不想用root来运行edge，则可指定本机账号的uid，windows下可忽略&lt;/p&gt;

&lt;p&gt;-g：如果不想用root来运行edge，则可指定本机账号的groupid，windows下可忽略&lt;/p&gt;

&lt;p&gt;-k：edge的加密密码&lt;/p&gt;

&lt;p&gt;-l：supernode的ip和端口&lt;/p&gt;

&lt;p&gt;-m：n2n虚拟网卡的MAC地址&lt;/p&gt;

&lt;p&gt;-r：运行edge进行数据转发&lt;/p&gt;

&lt;p&gt;-L：本机的内网地址，可以帮助同一个内网之间的通讯为直连，目前是v2s版本特有参数，官方版本暂无&lt;/p&gt;

&lt;p&gt;-b：解析域名对应的ip，适用于supernode的ip使用域名来进行连接&lt;/p&gt;

&lt;p&gt;在内网的另外一台机器上安装edge_v2s，启动的参数除了-u、-g、-m、-L与另一个edge参数不同外，其他参数要一致，如&lt;code&gt;edge_v2s -d n2nedge_v2s -a 172.10.2.210 -c community -u 500 -g 500 -k passwod -l 222.222.222.222:10088 -m 8B:2A:76:3F:C0:7B -r -L 192.168.1.110&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;附一个MAC地址在线生成：&lt;a href=&#34;http://www.99cankao.com/digital-computation/mac-address-generator.php&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;http://www.99cankao.com/digital-computation/mac-address-generator.php&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;edge连接测试&#34;&gt;edge连接测试&lt;/h5&gt;

&lt;p&gt;在多个edge之间相互ping看是否能通，然后通过n2n的内网ip访问下载服务，查看下载速度；&lt;/p&gt;

&lt;h4 id=&#34;通讯速度和网络运营商的关系&#34;&gt;通讯速度和网络运营商的关系&lt;/h4&gt;

&lt;p&gt;目前来看，电信+电信直连概率大，速度快；最差的是移动；&lt;/p&gt;

&lt;h3 id=&#34;常见问题&#34;&gt;常见问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;怎么知道自己的 edge 是否已经与中心节点 supernode 连接成功了？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;针对 N2N_V2 每两分钟显示一条，V2s 则每 25s 一条下面的信息
  关键字：Rx REGISTER_SUPER_ACK myMAC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  Rx REGISTER_SUPER_ACK myMAC=EE:DC:38:99:C9:42 [123.249.20.254:10086] (external 218.89.10.162:50021). Attempts 2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果中心节点 supernode 失效了会是什么样子呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;针对 edge_v1，则每分钟显示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Registering with supernode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对 edge_v2，则每 40 秒显示，针对 edge_v2s，则每 20 秒显示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING: Supernode not responding - moving to 0 of 1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果 edge 与 supernode 的版本对应错了，会是什么样子的？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;edge_v1 试图与 supernode_v2 或 v2s 连接（每分钟出现一条下面的信息）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Registering with supernode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;edge_v2 或 v2s 试图与 supernode_v1 连接时，反复出现如下信息（V2 每 40 秒，v2s 每 20 秒）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WARNING: Supernode not responding - moving to 0 of 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;edge_v2 试图与 supernode_v2s（v2s 试图与 V2）连接时，反复出现如下信息（V2 每 10 秒，v2s 每 5 秒）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  Rx REGISTER_SUPER_ACK myMAC=1D:C9:00:00:00:00 [123.249.20.254:10088] (external 218.89.10.162:42858). Attempts 2
  WARNING: Rx REGISTER_SUPER_ACK with wrong or old cookie.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>