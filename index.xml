<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>终点站</title>
    <link>https://blog.gofinall.com/</link>
    <description>Recent content on 终点站</description>
    <generator>Hugo -- gohugo.io</generator>
    
    <language>zh-CN</language>
    
    
    
    
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://blog.gofinall.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://blog.gofinall.com/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://blog.gofinall.com/about/</guid>
      <description>&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p&gt;本站作为博客(typecho)的备用站，等哪天我的博客主机(阿里云)没钱续费了，就直接在这个静态博客上更新了；&lt;/p&gt;

&lt;p&gt;博客主站：&lt;a href=&#34;https://gofinall.com&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://gofinall.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用Proxychains在终端使用socks5/http代理</title>
      <link>https://blog.gofinall.com/post/proxychains-ng/</link>
      <pubDate>Thu, 06 Jun 2019 14:33:31 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/proxychains-ng/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在国内的服务器上从github上拉代码或者go get的时候非常慢(网络受阻)的时候。&lt;/li&gt;
&lt;li&gt;当内网的某些服务器不能上外网，但是内网中有一台电脑能上外网，想让不能上外网的服务器上外网的时候。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;proxychains可以非常简单快速的设置好代理，让其它不能上网的服务器通过能上网的服务器进行上网。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;下载地址&#34;&gt;下载地址&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/rofl0r/proxychains-ng&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;安装方法&#34;&gt;安装方法&lt;/h3&gt;

&lt;p&gt;1  拉取代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:rofl0r/proxychains-ng.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2  编译安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost proxychains-ng]# cd proxychains-ng
[root@localhost proxychains-ng]# ./configure
[root@localhost proxychains-ng]# make
[root@localhost proxychains-ng]# make install
[root@localhost proxychains-ng]# cp src/proxychains.conf /usr/local/etc/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3  修改配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost proxychains-ng]# vi /usr/local/etc/proxychains.conf
#修改最后ProxyList里面的参数，假如我的代理地址为socks5:192.168.137.130 1080
#将socks4 127.0.0.1 9095改为
socks5         192.168.137.130 1080
#如果是http代理，则把socks5改成http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4  使用方法&lt;/p&gt;

&lt;p&gt;在需要进行代理的命令前加&lt;code&gt;proxychains&lt;/code&gt;即可，如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#直接访问网络不通的网址
[root@localhost]# curl http://ifconfig.me
curl: (6) Couldn&#39;t resolve host &#39;ifconfig.me&#39;
#使用代理的方式访问
[root@localhost]# proxychains curl http://ifconfig.me
[proxychains] config file found: /usr/local/etc/proxychains.conf
[proxychains] preloading /usr/local/lib/libproxychains4.so
[proxychains] DLL init
[proxychains] Strict chain ... 192.168.137.130:1080 ... ifconfig.me:80 ... OK
119.44.127.54
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用curl、yum、git clone、go get等命令的时候，都只要在前面加上proxychains，就都可以通过192.168.137.130的网络进行访问。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows使用NSSM将任意exe封装为服务</title>
      <link>https://blog.gofinall.com/post/windows-service-nssm/</link>
      <pubDate>Thu, 23 May 2019 14:32:58 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/windows-service-nssm/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;NSSM是一个服务封装程序，它可以将普通exe程序封装成服务，使之像windows服务一样运行。同类型的工具还有微软自己的srvany，不过nssm更加简单易用，并且功能强大。它的特点如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;支持普通exe程序（控制台程序或者带界面的Windows程序都可以）&lt;/li&gt;
&lt;li&gt;安装简单，修改方便&lt;/li&gt;
&lt;li&gt;可以重定向输出（并且支持Rotation）&lt;/li&gt;
&lt;li&gt;可以自动守护封装了的服务，程序挂掉了后可以自动重启&lt;/li&gt;
&lt;li&gt;可以自定义环境变量&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;官网&#34;&gt;官网&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://nssm.cc/&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;http://nssm.cc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;下载最新版本&lt;a href=&#34;http://nssm.cc/ci/nssm-2.24-103-gdee49fc.zip&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;nssm&lt;/a&gt;，也可以下载最新release版本；&lt;/li&gt;
&lt;li&gt;根据自己的平台，将32/64位nssm.exe文件解压至任意文件夹。&lt;/li&gt;
&lt;li&gt;cmd定位至nssm.exe所在目录。&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;nssm install {服务名称}&lt;/code&gt;，即注册服务的名称。注册服务弹出如下NSSM界面。
&lt;img src=&#34;https://blog.gofinall.com/post/images/nssm.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Application标签设置：&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Application Path: 选择系统安装的exe。&lt;/li&gt;
&lt;li&gt;Startup directory: 选择exe项目的根目录。&lt;/li&gt;
&lt;li&gt;Arguments: 输入启动参数&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;上述步骤操作完成，即可点击Install service来注册服务。我们在系统的服务中即可找到刚刚注册的服务。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在系统服务中找到刚刚注册的服务，右键&lt;code&gt;属性 - 恢复&lt;/code&gt;即可设置此服务挂掉重启等内容。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其它界面的是高级参数的配置，可以根据需要自行选择。&lt;/p&gt;

&lt;p&gt;参数填完后执行&amp;rdquo;install service&amp;rdquo;按钮即可将服务安装到系统，可以使用系统的服务管理工具查看了。&lt;/p&gt;

&lt;p&gt;当然，如果要自动化安装，可以直接带上程序路径：&lt;code&gt;nssm install &amp;lt;servicename&amp;gt; &amp;lt;program&amp;gt; [&amp;lt;arguments&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;NSSM本身win7及以上的系统基本都是支持的，我测试过win7，2008,2016系统，都是没有问题的，如果安装失败，请首先检查是否装了某国产管家或国产杀毒软件。&lt;/p&gt;

&lt;p&gt;安装完成后，服务还没有启动，需要通过下面的服务管理的命令启动服务。&lt;/p&gt;

&lt;h4 id=&#34;服务管理&#34;&gt;服务管理&lt;/h4&gt;

&lt;p&gt;服务管理主要有启动、停止和重启，其命令如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动服务：&lt;code&gt;nssm start &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;停止服务： &lt;code&gt;nssm stop &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启服务:    &lt;code&gt;nssm restart &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然，也可以使用系统自带的服务管理器操作和使用系统的命令。&lt;/p&gt;

&lt;h4 id=&#34;修改参数&#34;&gt;修改参数&lt;/h4&gt;

&lt;p&gt;NSSM安装的服务修改起来非常方便，命令如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nssm edit &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;会自动启动操作界面，直接更改即可。&lt;/p&gt;

&lt;h4 id=&#34;服务删除&#34;&gt;服务删除&lt;/h4&gt;

&lt;p&gt;服务删除可以使用如下命令之一：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nssm remove &amp;lt;servicename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nssm remove &amp;lt;servicename&amp;gt; confirm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;功能没有大的区别，后面的命令是自动确认的，没有交互界面。&lt;/p&gt;

&lt;h4 id=&#34;命令行&#34;&gt;命令行&lt;/h4&gt;

&lt;p&gt;服务自动化需要使用更多的命令行，具体参看官方文档： &lt;a href=&#34;https://nssm.cc/commands&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://nssm.cc/commands&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如下是一个官方安装Jenkins服务的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nssm install Jenkins %PROGRAMFILES%\Java\jre7\bin\java.exe
nssm set Jenkins AppParameters -jar slave.jar -jnlpUrl https://jenkins/computer/%COMPUTERNAME%/slave-agent.jnlp -secret redacted
nssm set Jenkins AppDirectory C:\Jenkins
nssm set Jenkins AppStdout C:\Jenkins\jenkins.log
nssm set Jenkins AppStderr C:\Jenkins\jenkins.log
nssm set Jenkins AppStopMethodSkip 6
nssm set Jenkins AppStopMethodConsole 1000
nssm set Jenkins AppThrottle 5000
nssm start Jenkins
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>chrome 73 版本上安装crx插件出现「程序包无效 CRX_HEADER_INVALID」的报错解决办法</title>
      <link>https://blog.gofinall.com/post/chrome-install-crx/</link>
      <pubDate>Sat, 18 May 2019 11:00:04 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/chrome-install-crx/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;在最新版 chrome 73 版本上，通过打开开发者模式，通过拖入crx文件来安装扩展，会出现「程序包无效 CRX_HEADER_INVALID」的报错，不想把crx解压了直接加载安装。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;chrome 更了的 crx3 的签名&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=941356&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://bugs.chromium.org/p/chromium/issues/detail?id=941356&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;解决办法&#34;&gt;解决办法&lt;/h3&gt;

&lt;p&gt;可以通过&amp;rsquo;get crx&amp;rsquo;插件来下载谷歌商店插件保存成crx文件：&lt;a href=&#34;https://chrome.google.com/webstore/detail/get-crx/dijpllakibenlejkbajahncialkbdkjc&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Get CRX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重新从谷歌网上应用商店下载新版本的crx即可&lt;/strong&gt;，拖入&lt;code&gt;get crx&lt;/code&gt;下载的插件即可安装。&lt;/p&gt;

&lt;p&gt;顺便在分享几个常用插件，方便不能上谷歌商店的人下载，下载后直接拖入即可安装。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/SwitchyOmega-v2.5.20.crx&#34;&gt;SwitchyOmega-v2.5.20.crx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/uBlock Origin-v1.19.2.crx&#34;&gt;uBlock Origin-v1.19.2.crx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.gofinall.com/post/files/Tampermonkey-v4.8.41.crx&#34;&gt;Tampermonkey-v4.8.41.crx&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>内网穿透之n2n-点对网</title>
      <link>https://blog.gofinall.com/post/n2n-p2p-route/</link>
      <pubDate>Fri, 17 May 2019 15:19:54 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/n2n-p2p-route/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;n2n v+p+n 其实与 pptp v+p+n 有类似的一面，都是一种点对点的局域网，所不同的是，n2n 可以建立点与点之间的直连，而 pptp 局域网内通讯的全部流量都必须走中心节点。pptp可以实现点对忘的连接，n2n应该也可以实现。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;p&gt;一台edge服务器充当&amp;rsquo;网关&amp;rsquo;角色，另外的edge服务器配置路由表，让内网的ip走指定的网关，就能达到在edge端的电脑上实现直接访问内网的ip。&lt;/p&gt;

&lt;h3 id=&#34;服务端edge服务器信息&#34;&gt;服务端edge服务器信息&lt;/h3&gt;

&lt;p&gt;centos 7 X86_64&lt;/p&gt;

&lt;h3 id=&#34;n2n版本&#34;&gt;n2n版本&lt;/h3&gt;

&lt;p&gt;v2s&lt;/p&gt;

&lt;h3 id=&#34;服务端edge配置&#34;&gt;服务端edge配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在n2n客户端(edge)上面(linux)开启转发功能&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vi /etc/sysctl.conf
#net.ipv4.ip_forward = 1 #将前面的#删除后保存退出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行&lt;code&gt;sysctl -p&lt;/code&gt;让刚刚修改的信息生效&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;调整centos7的防火墙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于对centos7默认的防火墙firewalld不熟悉，我们关闭firewalld，安装iptables防火墙&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#停止firewalld服务
systemctl stop firewalld

#禁止firewalld服务自启动
systemctl disable firewalld

#安装iptables防火墙
yum -y install iptables-services
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;对iptables进行初始化工作&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#清空filter表
iptables -F

#清空nat表
iptables -t nat -F

#默认允许所有传出连接
iptables -P OUTPUT ACCEPT

#允许环回接口的传入连接
iptables -A INPUT -i lo -j ACCEPT

#允许已建立的传入连接
iptables -t nat -A POSTROUTING -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;保存iptables配置&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;iptables-save &amp;gt; /etc/sysconfig/iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;启动iptables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl start iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;开机自动启动iptables&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl enable iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;客户端edge配置&#34;&gt;客户端edge配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;正常启动edge，确认能访问内网edge的ip&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置路由表&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;windows&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  route add -p 192.168.1.0(需要连接的内网网段) MASK 255.255.255.0 192.168.5.6(n2n的edge服务端ip)
  -p: 为当前Windows系统路由列表中永久添加一条静态路由,重启系统依然有效，如果不需要静态路由，添加路由时去掉-p参数。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  route add -net 192.168.1.0(需要连接的内网网段) netmask 255.255.255.0 gw 192.168.5.6(n2n的edge服务端ip)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;验证，在配置路由表的电脑上ping内网的ip&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>内网穿透之n2n-介绍及使用说明</title>
      <link>https://blog.gofinall.com/post/n2n-p2p-introduce/</link>
      <pubDate>Fri, 17 May 2019 12:01:09 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/n2n-p2p-introduce/</guid>
      <description>&lt;h3 id=&#34;介绍&#34;&gt;介绍&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ntop.org/products/n2n/&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;N2N &lt;/a&gt;是一款开源的P2P v+p+n 软件，其作者是著名的开源网管软件ntop的作者Luca Deri。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;N2N 是一个双层架构的v+p+n ，它让用户可以在网络层上开发P2P应用的典型功能，而不是在应用层上开发。这意味着用户可以获取本地IP一样的可见度（比如说，同一个n2n网络内的两台PC机可以相互ping通），并且可以通过n2n虚拟网内的IP地址相互访问，而不必关心当前所属的物理网络地址。可以这样说，OpenV+P+N是把SSL从应用层转移到网络层实现（比如说实现https协议），而n2n则是把P2P的实现从应用层转移到网络层。&lt;/p&gt;

&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;

&lt;p&gt;Edge 节点：用户PC 机上安装的用于建立n2n网络的软件。几乎每个edge节点都会建立一个tun/tap设备，作为接入n2n网络的入口。&lt;/p&gt;

&lt;p&gt;Supernode 超级节点：它在edge 节点间建立握手，或为位于防火墙之后的节点中转数据。它的基础作用是注册节点的网络路径，并为不能直通的节点做路由，能够直通的节点间通信，是P2P的。&lt;/p&gt;

&lt;p&gt;Edge 节点间通过虚拟的tap 网卡交互。每个tap网卡都是一个n2n edge节点。每台PC机可以有多个tap网卡，所以，在n2n网络中，同一台PC机可以属于多个网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.gofinall.com/post/images/n2n1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中super node 提供场所，让两个位于NAT/防火墙之后的edge node进行会面，一旦双方完成首次握手，剩下的数据流就之发生在两个edge node之间，如果有一方的NAT属于对称型(symmetrical)，super node则还需继续为双方提供数据包的转发;edge node负责数据流的加解密，原理很简单。&lt;/p&gt;

&lt;h3 id=&#34;与传统的v-p-n的优点&#34;&gt;与传统的v+p+n的优点&lt;/h3&gt;

&lt;p&gt;大部分v+p+n，都是通过服务器中转，而n2n是通过udp协议，在两边edge的NAT情况比较好的情况下，会建立两个edge之间的&lt;strong&gt;直接连接&lt;/strong&gt;，一个北京和一个重庆的两个edge服务器，如果直连成功，之间的下载速度可以达到 n MB/s；当网络条件比较恶劣的时候，数据会从supernode中转，速度就靠到supernode的速度决定；&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;h4 id=&#34;地址&#34;&gt;地址&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;v1: &lt;a href=&#34;https://github.com/meyerd/n2n/tree/master/n2n_v1&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/tree/master/n2n_v1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;v2: &lt;a href=&#34;https://github.com/ntop/n2n&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/ntop/n2n&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;v2.1(v2s): &lt;a href=&#34;https://github.com/meyerd/n2n/tree/master/n2n_v2&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/tree/master/n2n_v2&lt;/a&gt; &lt;strong&gt;非官方版本，与官方的 v2 不兼容&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安卓版本: &lt;a href=&#34;https://github.com/switch-iot/hin2n&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/switch-iot/hin2n&lt;/a&gt; (最新版本支持v1、v2、v2s)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过网友的测试，n2n_v2s直连概率比较高，所以本文暂时只介绍n2n_v2s的安装及使用方法&lt;/p&gt;

&lt;h4 id=&#34;安装方法&#34;&gt;安装方法&lt;/h4&gt;

&lt;p&gt;详见 &lt;a href=&#34;https://github.com/meyerd/n2n/wiki&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/meyerd/n2n/wiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;使用方法&#34;&gt;使用方法&lt;/h3&gt;

&lt;h4 id=&#34;supernode&#34;&gt;supernode&lt;/h4&gt;

&lt;p&gt;在有公网的的服务器上安装supernode，为了区分其他版本，重命名为supernode_v2s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost ~]# supernode_v2s --help
supernode_v2s usage
-l &amp;lt;lport&amp;gt;      Set UDP main listen port to &amp;lt;lport&amp;gt;
-f              Run in foreground.
-u &amp;lt;UID&amp;gt;        User ID (numeric) to use when privileges are dropped.
-g &amp;lt;GID&amp;gt;        Group ID (numeric) to use when privileges are dropped.
-v              Increase verbosity. Can be used multiple times.
-h              This help message.

# 启动supernode
[root@localhost ~]# supernode_v2s -l 10088

[root@localhost ~]# ps -ef|grep supernode_v2s
root     21024     1  0 Apr25 ?        00:03:59 supernode_v2s -l 10088
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;edge&#34;&gt;edge&lt;/h4&gt;

&lt;p&gt;在内网电脑上安装edge，为了区分其他版本，重命名为edge_v2s&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost1 ~]# edge_v2s --help
Welcome to n2n v.2.1.0 for Linux-2.6.32-642.el6.x86_64
Built on Jun 12 2018 18:21:36
Copyright 2007-09 - http://www.ntop.org

edge -d &amp;lt;tun device&amp;gt; -a [static:|dhcp:]&amp;lt;tun IP address&amp;gt; -c &amp;lt;community&amp;gt; [-k &amp;lt;encrypt key&amp;gt; | -K &amp;lt;key file&amp;gt;] [-s &amp;lt;netmask&amp;gt;] [-u &amp;lt;uid&amp;gt; -g &amp;lt;gid&amp;gt;][-f][-m &amp;lt;MAC address&amp;gt;]
-l &amp;lt;supernode host:port&amp;gt; [-p &amp;lt;local port&amp;gt;] [-M &amp;lt;mtu&amp;gt;] [-r] [-E] [-v] [-t &amp;lt;mgmt port&amp;gt;] [-b] [-h]

-d &amp;lt;tun device&amp;gt;          | tun device name
-a &amp;lt;mode:address&amp;gt;        | Set interface address. For DHCP use &#39;-r -a dhcp:0.0.0.0&#39;
-c &amp;lt;community&amp;gt;           | n2n community name the edge belongs to.
-k &amp;lt;encrypt key&amp;gt;         | Encryption key (ASCII) - also N2N_KEY=&amp;lt;encrypt key&amp;gt;. Not with -K.
-K &amp;lt;key file&amp;gt;            | Specify a key schedule file to load. Not with -k.
-s &amp;lt;netmask&amp;gt;             | Edge interface netmask in dotted decimal notation (255.255.255.0).
-l &amp;lt;supernode host:port&amp;gt; | Supernode IP:port
-L &amp;lt;local_ip&amp;gt;            | Add local ip to bypass between same nat problem
-i &amp;lt;interval&amp;gt;            | Set the NAT hole-punch interval (default 20seconds)
-b                       | Periodically resolve supernode IP
                         : (when supernodes are running on dynamic IPs)
-p &amp;lt;local port&amp;gt;          | Fixed local UDP port.
-u &amp;lt;UID&amp;gt;                 | User ID (numeric) to use when privileges are dropped.
-g &amp;lt;GID&amp;gt;                 | Group ID (numeric) to use when privileges are dropped.
-f                       | Do not fork and run as a daemon; rather run in foreground.
-m &amp;lt;MAC address&amp;gt;         | Fix MAC address for the TAP interface (otherwise it may be random)
                         : eg. -m 01:02:03:04:05:06
-M &amp;lt;mtu&amp;gt;                 | Specify n2n MTU of edge interface (default 1400).
-r                       | Enable packet forwarding through n2n community.
-E                       | Accept multicast MAC addresses (default=drop).
-v                       | Make more verbose. Repeat as required.
-t                       | Management UDP Port (for multiple edges on a machine).

Environment variables:
  N2N_KEY                | Encryption key (ASCII). Not with -K or -k.
  
# 启动edge
[root@localhost1 ~]# edge_v2s -d n2nedge_v2s -a 172.10.2.200 -c community -u 604 -g 604 -k passwod -l 222.222.222.222:10088 -m 31:29:35:FB:C7:5B -r -L 192.168.1.100

# 查看edge的ip
[root@localhost1 ~]# ifconfig |grep 172.10.2.200
n2nedge_v2s   Link encap:Ethernet  HWaddr 31:29:35:FB:C7:5B  
              inet addr:172.10.2.200  Bcast:172.10.2.255  Mask:255.255.255.0
              inet6 addr: fe80::fe0c:8eef:f86e:d10/64 Scope:Link
              TX packets:1096871 errors:0 dropped:0 overruns:0 carrier:0
              TX packets:470900375 errors:0 dropped:0 overruns:3105 carrier:0
              RX bytes:11377271 (10.8 MiB)  TX bytes:41626135028 (38.7 GiB)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用参数说明：&lt;/p&gt;

&lt;p&gt;-d：虚拟网卡名称&lt;/p&gt;

&lt;p&gt;-a：n2n网卡的ip地址，即本机的n2n的ip&lt;/p&gt;

&lt;p&gt;-c：n2n组，只有相同组的edge之间才能进行通讯&lt;/p&gt;

&lt;p&gt;-u：如果不想用root来运行edge，则可指定本机账号的uid，windows下可忽略&lt;/p&gt;

&lt;p&gt;-g：如果不想用root来运行edge，则可指定本机账号的groupid，windows下可忽略&lt;/p&gt;

&lt;p&gt;-k：edge的加密密码&lt;/p&gt;

&lt;p&gt;-l：supernode的ip和端口&lt;/p&gt;

&lt;p&gt;-m：n2n虚拟网卡的MAC地址&lt;/p&gt;

&lt;p&gt;-r：运行edge进行数据转发&lt;/p&gt;

&lt;p&gt;-L：本机的内网地址，可以帮助同一个内网之间的通讯为直连，目前是v2s版本特有参数，官方版本暂无&lt;/p&gt;

&lt;p&gt;-b：解析域名对应的ip，适用于supernode的ip使用域名来进行连接&lt;/p&gt;

&lt;p&gt;在内网的另外一台机器上安装edge_v2s，启动的参数除了-u、-g、-m、-L与另一个edge参数不同外，其他参数要一致，如&lt;code&gt;edge_v2s -d n2nedge_v2s -a 172.10.2.210 -c community -u 500 -g 500 -k passwod -l 222.222.222.222:10088 -m 8B:2A:76:3F:C0:7B -r -L 192.168.1.110&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;附一个MAC地址在线生成：&lt;a href=&#34;http://www.99cankao.com/digital-computation/mac-address-generator.php&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;http://www.99cankao.com/digital-computation/mac-address-generator.php&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;edge连接测试&#34;&gt;edge连接测试&lt;/h5&gt;

&lt;p&gt;在多个edge之间相互ping看是否能通，然后通过n2n的内网ip访问下载服务，查看下载速度；&lt;/p&gt;

&lt;h4 id=&#34;通讯速度和网络运营商的关系&#34;&gt;通讯速度和网络运营商的关系&lt;/h4&gt;

&lt;p&gt;目前来看，电信+电信直连概率大，速度快；最差的是移动；&lt;/p&gt;

&lt;h3 id=&#34;常见问题&#34;&gt;常见问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;怎么知道自己的 edge 是否已经与中心节点 supernode 连接成功了？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;针对 N2N_V2 每两分钟显示一条，V2s 则每 25s 一条下面的信息
  关键字：Rx REGISTER_SUPER_ACK myMAC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  Rx REGISTER_SUPER_ACK myMAC=EE:DC:38:99:C9:42 [123.249.20.254:10086] (external 218.89.10.162:50021). Attempts 2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果中心节点 supernode 失效了会是什么样子呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;针对 edge_v1，则每分钟显示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Registering with supernode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;针对 edge_v2，则每 40 秒显示，针对 edge_v2s，则每 20 秒显示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING: Supernode not responding - moving to 0 of 1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;如果 edge 与 supernode 的版本对应错了，会是什么样子的？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;edge_v1 试图与 supernode_v2 或 v2s 连接（每分钟出现一条下面的信息）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Registering with supernode&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;edge_v2 或 v2s 试图与 supernode_v1 连接时，反复出现如下信息（V2 每 40 秒，v2s 每 20 秒）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;WARNING: Supernode not responding - moving to 0 of 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;edge_v2 试图与 supernode_v2s（v2s 试图与 V2）连接时，反复出现如下信息（V2 每 10 秒，v2s 每 5 秒）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;  Rx REGISTER_SUPER_ACK myMAC=1D:C9:00:00:00:00 [123.249.20.254:10088] (external 218.89.10.162:42858). Attempts 2
  WARNING: Rx REGISTER_SUPER_ACK with wrong or old cookie.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>git add出现in unpopulated submodule &#39;themes&#39;问题</title>
      <link>https://blog.gofinall.com/post/git-add-error-unpopulated/</link>
      <pubDate>Wed, 10 Apr 2019 17:09:29 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/git-add-error-unpopulated/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;用hugo搭建了个博客，我把博客的data目录提交到git上做备份，把public提交到pages上。但是在备份data目录的时候有点问题；&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;目录结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;D:\hugo\data
archetypes/ 
config.toml 
content/    
data/       
layouts/    
public/     
readme.md   
resources/  
static/     
themes/     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我在 data/ 目录下add commit push 后发现远程仓库内并没有themes/的内容，于是我在themes/ 下执行 ”git add .” 提示：“in unpopulated submodule ‘themes’ ”&lt;/p&gt;

&lt;h3 id=&#34;解决方法&#34;&gt;解决方法&lt;/h3&gt;

&lt;p&gt;在 data/ 下输入”git rm -r –cached themes/“&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：是themes/ ，意为themes目录及子目录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 data/ 下输入”git add themes”&lt;/p&gt;

&lt;p&gt;git commit -m “ ”&lt;/p&gt;

&lt;p&gt;git push origin master&lt;/p&gt;

&lt;p&gt;去远程git库看一下，已经提交上去了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows远程桌面(mstsc)不能复制粘贴的解决办法</title>
      <link>https://blog.gofinall.com/post/windows-mstsc-copy/</link>
      <pubDate>Wed, 10 Apr 2019 16:44:16 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/windows-mstsc-copy/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;原来通过mstsc远程连接Windows能够直接在本地和服务器之间复制、粘贴一些文字和文件，最近突然无法直接复制粘贴了，只能通过远程映射的本地磁盘方式交换文件；&lt;/p&gt;

&lt;p&gt;已经确认远程桌面连接选项“本地资源-》本地设备和资源-》剪贴板”中勾选了剪贴板。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;解决办法&#34;&gt;解决办法&lt;/h3&gt;

&lt;p&gt;在远程Windows服务器中重启“rdpclip.exe”进程即可。&lt;/p&gt;

&lt;p&gt;1、打开资源管理器，杀掉rdpclip.exe进程；&lt;/p&gt;

&lt;p&gt;2、开始——》运行，输入：rdpclip.exe，回车重启该进程。&lt;/p&gt;

&lt;p&gt;3、此时粘贴文件或者文字发现已经可以粘贴了。&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;目前未知，本文留作记录，下次遇到了直接操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tomcat8启动报there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache</title>
      <link>https://blog.gofinall.com/post/tomcat8-error-cachemaxsize/</link>
      <pubDate>Wed, 10 Apr 2019 16:29:25 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/tomcat8-error-cachemaxsize/</guid>
      <description>&lt;p&gt;当用tomcat8启动工程的时候，日志报错&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;09-Dec-2016 10:57:49.150 WARNING [localhost-startStop-1] org.apache.catalina.webresources.Cache.getResource Unable to add the resource at [/WEB-INF/classes/struts/PersonnelActio
n.xml] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache
09-Dec-2016 10:57:51.729 SEVERE [localhost-startStop-1] org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.addChild: start:
 org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[]]
        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:158)
        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:724)
        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:700)
        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)
        at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)
        at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;原因&#34;&gt;原因&lt;/h3&gt;

&lt;p&gt;console警告缓存不够。&lt;/p&gt;

&lt;p&gt;根据apache官方文档：
&lt;a href=&#34;http://tomcat.apache.org/tomcat-8.0-doc/config/resources.html&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;http://tomcat.apache.org/tomcat-8.0-doc/config/resources.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The maximum size of the static resource cache in kilobytes. If not specified, the default value is 10240 (10 megabytes). This value may be changed while the web application is running (e.g. via JMX). If the cache is using more memory than the new limit the cache will attempt to reduce in size over time to meet the new limit. If necessary, cacheObjectMaxSize will be reduced to ensure that it is no larger than cacheMaxSize/20.&lt;/p&gt;

&lt;p&gt;静态资源缓存的最大大小，以&lt;strong&gt;千字节&lt;/strong&gt;为单位。如果未指定，则默认值为&lt;strong&gt;10240（10兆字节）&lt;/strong&gt;。在Web应用程序运行时（例如，通过JMX），可能需要更改此值。如果缓存使用的内存大于新的限制，则缓存将尝试缩小规模以适应新的限制。如有必要，cacheObjectMaxSize将被缩小以确保它不大于设置的cacheMaxSize 值的1/ 20。&lt;/p&gt;

&lt;h3 id=&#34;解决办法&#34;&gt;解决办法&lt;/h3&gt;

&lt;p&gt;tomcat8以上对resource采取了cache，而默认的大小是10M. 可能超过了此限制。&lt;/p&gt;

&lt;p&gt;解决的办法是在context.xml中调大缓存即可，加在&lt;code&gt;&amp;lt;/context&amp;gt;&lt;/code&gt;前就行。具体如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;lt;Resources cachingAllowed=&amp;quot;true&amp;quot; cacheMaxSize=&amp;quot;1000000&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Nginx隐藏响应头信息的Server信息和版本信息,隐藏tomcat版本号</title>
      <link>https://blog.gofinall.com/post/nginx-display-version/</link>
      <pubDate>Mon, 21 Jan 2019 11:43:12 +0800</pubDate>
      <author> 死性不改 </author>
      <guid>https://blog.gofinall.com/post/nginx-display-version/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;

&lt;p&gt;当使用nginx做为web服务器时，在头部信息会看到版本号相关的信息，在安全扫描的时候会扫出来，要求不能显示nginx版本，避免根据已知的版本的nginx的特有漏洞从漏洞信息中获取该版本的攻击方式并进行攻击。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;修改方法&#34;&gt;修改方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;nginx版本：1.14.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;隐藏nginx版本信息&#34;&gt;隐藏nginx版本信息&lt;/h4&gt;

&lt;p&gt;在nginx.conf的http里面加&lt;code&gt;server_tokens off;&lt;/code&gt;,重载nginx配置，就可以隐藏版本号。&lt;/p&gt;

&lt;h4 id=&#34;隐藏response-headers中server信息&#34;&gt;隐藏Response Headers中server信息&lt;/h4&gt;

&lt;p&gt;实现方案 : &lt;strong&gt;需要重新编译nginx&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;停止当前的nginx，进入解压出来的nginx &lt;strong&gt;源码&lt;/strong&gt; 目录（不是nginx的安装目录）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vi src/http/ngx_http_header_filter_module.c  # 49-50行&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;编辑:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;原内容：
static char ngx_http_server_string[] = &amp;quot;Server: nginx&amp;quot; CRLF;
static char ngx_http_server_full_string[] = &amp;quot;Server: &amp;quot; NGINX_VER CRLF;

更改为：
static char ngx_http_server_string[] = &amp;quot;Server: Xacp-Web&amp;quot; CRLF;
static char ngx_http_server_full_string[] = &amp;quot;Server: Xacp-Web &amp;quot; CRLF;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改完后重新编译nginx，启动nginx；&lt;/p&gt;

&lt;p&gt;再看Response Headers里面Server信息变成了自定义的名字，不再显示nginx信息了，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Response Headers

Connection: keep-alive
Date: Mon, 21 Jan 2019 03:41:42 GMT
ETag: &amp;quot;5c453d16-264&amp;quot;
Last-Modified: Mon, 21 Jan 2019 03:31:34 GMT
Server: Xacp-Web
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;隐藏默认错误页面显示&#34;&gt;隐藏默认错误页面显示&lt;/h3&gt;

&lt;p&gt;停止当前的nginx，进入解压出来的nginx &lt;strong&gt;源码&lt;/strong&gt; 目录（不是nginx的安装目录）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vi src/http/ngx_http_special_response.c  #36行&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;编辑:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;原内容：
static u_char ngx_http_error_tail[] =
&amp;quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;&amp;quot; CRLF
&amp;quot;&amp;lt;/body&amp;gt;&amp;quot; CRLF
&amp;quot;&amp;lt;/html&amp;gt;&amp;quot; CRLF

更改为：
static u_char ngx_http_error_tail[] =
&amp;quot;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;Xacp-Web&amp;lt;/center&amp;gt;&amp;quot; CRLF
&amp;quot;&amp;lt;/body&amp;gt;&amp;quot; CRLF
&amp;quot;&amp;lt;/html&amp;gt;&amp;quot; CRLF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改完后重新编译nginx，启动nginx；&lt;/p&gt;

&lt;p&gt;随便输入一个nginx上不存在的url路径，查看返回的错误页面已经更改，不再返回nginx信息。&lt;/p&gt;

&lt;h3 id=&#34;隐藏tomcat版本号&#34;&gt;隐藏tomcat版本号&lt;/h3&gt;

&lt;p&gt;既然提到了nginx隐藏版本号，顺便记录下tomcat的版本号的方法；&lt;/p&gt;

&lt;p&gt;在Tomcat的使用中每当发生HTTP错误（未找到错误等）时显示错误页脚，由于版本信息显示在错误屏幕上或者Apache Tomcat的版本信息会显示在部件中，就可以从根据已知的版本的Tomcat的特有漏洞从漏洞信息中获取该版本的攻击方式并进行攻击。&lt;/p&gt;

&lt;p&gt;首先将Tomcat解压后找到它的lib文件夹下的&lt;code&gt;catalina.jar&lt;/code&gt;，用winrar把catalina.jar里面的&lt;code&gt;/org/apache/catalina/util/ServerInfo.properties&lt;/code&gt;文件拖出来；&lt;/p&gt;

&lt;p&gt;修改方法：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vi ServerInfo.properties&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#原配置
server.info=Apache Tomcat/8.5.23
server.number=8.5.23.0
server.built=Sep 28 2017 10:30:11 UTC
#修改成
#把server.info后面的/版本号删掉，把server.number、server.built后面的信息删掉
server.info=Apache Tomcat
server.number=
server.built=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，用winrar打开catalina.jar，把&lt;code&gt;ServerInfo.properties&lt;/code&gt;拖进目录&lt;code&gt;/org/apache/catalina/util/&lt;/code&gt;替换之前的配置文件，重启tomcat即可。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;备注&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;linux下可以直接用vi操作，操作方式如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vi catalina.jar&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;搜索&lt;code&gt;ServerInfo&lt;/code&gt;,找到ServerInfo.properties，回车进去修改，修改完成后&lt;code&gt;:wq&lt;/code&gt;即可；&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>